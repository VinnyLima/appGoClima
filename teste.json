{
  "base": "stations",
  "clouds": {
    "all": 75
  },
  "cod": 200,
  "coord": {
    "lat": -20.29,
    "lon": -40.37
  },
  "dt": 1594943799,
  "id": 7732959,
  "main": {
    "feels_like": 293.38,
    "humidity": 88,
    "pressure": 1024,
    "temp": 292.09,
    "temp_max": 292.15,
    "temp_min": 292.04
  },
  "name": "Disney",
  "sys": {
    "country": "BR",
    "id": 8474,
    "sunrise": 1594890998,
    "sunset": 1594930687,
    "type": 1
  },
  "timezone": -10800,
  "visibility": 10000,
  "weather": [
    {
      "description": "broken clouds",
      "icon": "04n",
      "id": 803,
      "main": "Clouds"
    }
  ],
  "wind": {
    "deg": 330,
    "speed": 1.5
  }
}

import Geolocation from 'react-native-geolocation-service';
import api from '../../services/api';
import {Container, Reload} from './style';

const apikey = 'd55143bf18a6deb7e90c8f3a26783805';

interface Coordenadas {
  latitude: number;
  longitude: number;
}

export default function Clima() {
  const [hasLocationPermission, setHasLocationPermission] = useState(false);
  const [userPosition, setUserPosition] = useState<Coordenadas>(Object);
  const [coords, setCoords] = useState({});
  const [weather, setWeather] = useState({});

  async function verifyLocationPermission() {
    try {
      const granted = await PermissionsAndroid.request(
        PermissionsAndroid.PERMISSIONS.ACCESS_FINE_LOCATION,
      );
      if (granted === PermissionsAndroid.RESULTS.GRANTED) {
        console.log('permissão concedida');
        setHasLocationPermission(true);
      } else {
        console.error('permissão negada');
        setHasLocationPermission(false);
      }
    } catch (err) {
      console.warn(err);
    }
  }

  useEffect(() => {
    verifyLocationPermission();
    async function handleLocation() {
      if (hasLocationPermission) {
        await Geolocation.getCurrentPosition(
          (position) => {
            setUserPosition({
              latitude: position.coords.latitude,
              longitude: position.coords.longitude,
            });
          },
          (error) => {
            console.log(error.code, error.message);
          },
        );
      }
    }
    handleLocation();
  }, [hasLocationPermission]);

  const {latitude, longitude} = userPosition;

  const caminho = `2.5/weather?lat=${userPosition.latitude}&lon=${userPosition.longitude}&appid=${apikey}`;

  useEffect(() => {
    async function handleClima(): Promise<void> {
      try {
        await api.get(caminho).then((response) => {
          setWeather(response.data);
        });
      } catch (err) {
        console.error(err);
      }
    }
    handleClima();
  }, [caminho]);
